#global_properties:
#	snowflake
#	schedule
#	tags
#	origins

[schedule]
schedule.interval = @daily
schedule.start_date = 2022-04-19 15:00:00.000000

[snowflake]
snowflake.stage_type = gcs
snowflake.batch_size_rows = 100000
snowflake.no_compression = false
snowflake.wait_to_load = false

[tags]
tags = tag test

[origins]
origins = ptr,exadata

#can overwrite/add properties origin-wise, ej.
#	ptr.snowflake

#also table-wise 
#	ptr.table.snowflake

#default strategy: single query
#availables: 	
#	partition (+partition_column, + partitions)
#	offset_rownum (+max_results)
#	offset_denserank (+max_results)			

[origins.ptr]
ptr.snowflake.prefix = ptr
ptr.filter_schemas = aap_drive,cdrive
#single query strategy overrides to 1 thread
ptr.query_threads = 3

[ptr.schemas]
ptr.aap_drive.tables = fact_precio_art_promocion,fact_venta_evento,fact_art_no_nuevo,dim_fecha_evento,fact_estimacion,fact_estimacion_ped

ptr.cdrive.tables = aux_articulo_etiqueta
ptr.cdrive.snowflake.prefix = ptr_cdrive

[ptr.tables]
#if fields not especified, grab all
ptr.aap_drive.fact_precio_art_promocion.fields = *
ptr.aap_drive.fact_precio_art_promocion.replication-method = FULL_TABLE
ptr.aap_drive.fact_precio_art_promocion.snowflake.compression = true
ptr.aap_drive.fact_precio_art_promocion.snowflake.prefix = PRUEBA
ptr.aap_drive.fact_precio_art_promocion.query_threads = 1

ptr.aap_drive.fact_venta_evento.fields = *
ptr.aap_drive.fact_venta_evento.replication-method = FULL_TABLE
ptr.aap_drive.fact_venta_evento.strategy = partition
ptr.aap_drive.fact_venta_evento.partition_column = FECHA_PEDIDO
ptr.aap_drive.fact_venta_evento.partitions = 5


ptr.aap_drive.fact_art_no_nuevo.replication-method = FULL_TABLE
ptr.aap_drive.fact_art_no_nuevo.strategy = offset_rownum
ptr.aap_drive.fact_art_no_nuevo.max_results = 500000


ptr.aap_drive.dim_fecha_evento.fields = ID_FECHA_EVENTO,FECHA_HORA_MINUTO
ptr.aap_drive.dim_fecha_evento.replication-method = FULL_TABLE


ptr.aap_drive.fact_estimacion.replication-method = FULL_TABLE
ptr.aap_drive.fact_estimacion.encrypt_columns = IMPTE_BRUTO_ECOMM_A1,IMPTE_BRUTO_SI_ESTI,USUARIO_ALTA


ptr.aap_drive.fact_estimacion_ped.replication-method = FULL_TABLE
ptr.aap_drive.fact_estimacion_ped.additional_filters = ID_CADENA = 16


ptr.aap_drive.fact_precio_art_promocion.encrypt_columns = ID_PROMOCION
ptr.aap_drive.fact_precio_art_promocion.strategy = offset_denserank
ptr.aap_drive.fact_precio_art_promocion.max_results = 500000
ptr.aap_drive.fact_precio_art_promocion.snowflake.stage_type = snowflake


ptr.cdrive.aux_articulo_etiqueta.replication-method = FULL_TABLE

[origins.exadata]
exadata.tables = dim_articulo_color_talla
exadata.filter_schemas = dmcomercial
exadata.snowflake.prefix = exadata
exadata.query_threads = 10

[exadata.schemas]
exadata.dmcomercial.tables = aux_articulo_etiqueta
exadata.dmcomercial.snowflake.prefix = ptr_dmcomercial

[exadata.tables]
exadata.dmcomercial.dim_articulo_color_talla.encrypt_columns = CALIDAD,FECHA_ALTA,PVP_TEMPORADA
exadata.dmcomercial.dim_articulo_color_talla.additional_filters = coalesce(fecha_modificacion, fecha_alta) >= trunc(sysdate- 5)
exadata.dmcomercial.dim_articulo_color_talla.strategy = partition
exadata.dmcomercial.dim_articulo_color_talla.partitions = 10
exadata.dmcomercial.dim_articulo_color_talla.partition_column = FECHA_MODIFICACION
#
